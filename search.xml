<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>雪花id生成器</title>
      <link href="/2024/07/27/%E9%9B%AA%E8%8A%B1id%E7%94%9F%E6%88%90%E5%99%A8/"/>
      <url>/2024/07/27/%E9%9B%AA%E8%8A%B1id%E7%94%9F%E6%88%90%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="雪花组成"><a href="#雪花组成" class="headerlink" title="雪花组成"></a>雪花组成</h1><blockquote><p>第一位（符号位）：由于ID都是正整数，所以第一位始终为0。（负数的二进制第一位为1）</p><p>时间戳（41位）：记录时间戳的差值（相对于某个固定时间点），单位是毫秒。41位时间戳可以使用69年（从1970年开始，可用至2039年）。</p><p>工作机器id（10位）：用于标识不同的工作机器（如不同的服务器实例），支持在同一数据中心内部署最多1024台机器。</p><p>如果存在跨机房部署的情况下可以把这10个bit位，拆分成两个5bit，前5个bit表示机房id，后面5个表示机器的id</p><p>序列号（12位）：用于在同一毫秒内产生不同的ID，支持每个工作机器在同一毫秒内产生最多4096个ID。</p></blockquote><h1 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h1><ol><li><p>初始化参数<br>  在启动服务时，需要为每个工作机器分配一个唯一的工作机器id和一个数据中心id。这些id通常在服务配置中指定，并且在整个服务运行期间保持不变。</p></li><li><p>生成时间戳<br>  每次生成ID时，首先获取当前时间戳（毫秒级），并计算其与起始时间戳的差值。起始时间戳是一个固定的时间点，通常设置为服务的启动时间或某个固定的时间点。</p></li><li><p>分配工作机器id和数据中心id<br>  根据服务的配置，将工作机器id和数据中心id分别放入ID的相应位置。这些id在初始化时分配，并在整个服务运行期间保持不变。</p></li><li><p>生成序列号<br>  在同一毫秒内，如果多次调用生成ID的方法，需要使用序列号来区分不同的ID。序列号从0开始递增，当序列号达到最大值（4095）时，需要等待下一毫秒才能继续生成ID。</p></li><li><p>组装ID<br>  将时间戳差值、工作机器id、数据中心id和序列号按照指定的位数进行位移和或运算，生成最终的64位ID。</p></li><li><p>处理时钟回拨问题<br>  由于时钟误差或网络延迟等原因，可能会出现时钟回拨的情况。为了处理这种情况，雪花算法通常使用一个缓存机制来存储最近生成的时间戳。如果当前时间戳小于缓存中的时间戳，则拒绝生成ID并等待一段时间再试。这样可以避免由于时钟回拨导致的ID冲突问题。</p></li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">package com.yy;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.atomic.LongAdder;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * ID生成器，基于Snowflake算法实现。</span><br><span class="line"> * 用于生成全局唯一且递增的ID。</span><br><span class="line"> */</span><br><span class="line">public class IdGenerator &#123;</span><br><span class="line"></span><br><span class="line">    // 起始时间戳，用于计算相对于此时间的毫秒数</span><br><span class="line">    public static final long START_STAMP = DateUtil.get(&quot;2022-1-1&quot;).getTime();</span><br><span class="line"></span><br><span class="line">    // 定义数据中心位数、机器位数和序列号位数</span><br><span class="line">    public static final long DATA_CENTER_BIT = 5L;</span><br><span class="line">    public static final long MACHINE_BIT = 5L;</span><br><span class="line">    public static final long SEQUENCE_BIT = 12L;</span><br><span class="line"></span><br><span class="line">    // 根据位数计算最大值</span><br><span class="line">    public static final long DATA_CENTER_MAX = ~(-1L &lt;&lt; DATA_CENTER_BIT);</span><br><span class="line">    public static final long MACHINE_MAX = ~(-1L &lt;&lt; MACHINE_BIT);</span><br><span class="line">    public static final long SEQUENCE_MAX = ~(-1L &lt;&lt; SEQUENCE_BIT);</span><br><span class="line"></span><br><span class="line">    // 定义时间戳、数据中心、机器号和序列号的位移</span><br><span class="line">    public static final long TIMESTAMP_LEFT = DATA_CENTER_BIT + MACHINE_BIT + SEQUENCE_BIT;</span><br><span class="line">    public static final long DATA_CENTER_LEFT = MACHINE_BIT + SEQUENCE_BIT;</span><br><span class="line">    public static final long MACHINE_LEFT = SEQUENCE_BIT;</span><br><span class="line"></span><br><span class="line">    // 数据中心ID、机器ID和序列号</span><br><span class="line">    private long dataCenterId;</span><br><span class="line">    private long machineId;</span><br><span class="line">    private LongAdder sequenceId = new LongAdder();</span><br><span class="line">    // 记录上一次的时间戳，用于处理时钟回拨问题</span><br><span class="line">    private long lastTimeStamp = -1L;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 构造函数，初始化ID生成器。</span><br><span class="line">     * @param dataCenterId 数据中心ID，用于标识不同的数据中心</span><br><span class="line">     * @param machineId 机器ID，用于标识同一数据中心内的不同机器</span><br><span class="line">     * @throws IllegalArgumentException 如果数据中心ID或机器ID超出范围，抛出此异常</span><br><span class="line">     */</span><br><span class="line">    public IdGenerator(long dataCenterId, long machineId) &#123;</span><br><span class="line">        if(dataCenterId &gt; DATA_CENTER_MAX || machineId &gt; MACHINE_MAX)&#123;</span><br><span class="line">            throw new IllegalArgumentException(&quot;你传入的数据中心编号或机器号不合法.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        this.dataCenterId = dataCenterId;</span><br><span class="line">        this.machineId = machineId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 生成唯一ID。</span><br><span class="line">     * @return 生成的唯一ID</span><br><span class="line">     * @throws RuntimeException 如果检测到时钟回拨，抛出此异常</span><br><span class="line">     */</span><br><span class="line">    public long getId()&#123;</span><br><span class="line">        // 获取当前时间戳</span><br><span class="line">        long currentTime = System.currentTimeMillis();</span><br><span class="line">        long timeStamp = currentTime - START_STAMP;</span><br><span class="line"></span><br><span class="line">        // 检查时钟回拨</span><br><span class="line">        if(timeStamp &lt; lastTimeStamp)&#123;</span><br><span class="line">            throw new RuntimeException(&quot;您的服务器进行了时钟回调.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 处理同一时间戳内的序列号自增</span><br><span class="line">        if (timeStamp == lastTimeStamp)&#123;</span><br><span class="line">            sequenceId.increment();</span><br><span class="line">            if(sequenceId.sum() &gt;= SEQUENCE_MAX)&#123;</span><br><span class="line">                timeStamp = getNextTimeStamp();</span><br><span class="line">                sequenceId.reset();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            sequenceId.reset();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 更新上一次的时间戳</span><br><span class="line">        lastTimeStamp = timeStamp;</span><br><span class="line">        long sequence = sequenceId.sum();</span><br><span class="line">        // 组合时间戳、数据中心ID、机器ID和序列号，生成最终ID</span><br><span class="line">        return timeStamp &lt;&lt; TIMESTAMP_LEFT |  dataCenterId &lt;&lt; DATA_CENTER_LEFT</span><br><span class="line">            | machineId &lt;&lt; MACHINE_LEFT | sequence;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取下一个时间戳，用于处理时钟回拨情况。</span><br><span class="line">     * @return 下一个时间戳</span><br><span class="line">     */</span><br><span class="line">    private long getNextTimeStamp() &#123;</span><br><span class="line">        long current = System.currentTimeMillis() - START_STAMP;</span><br><span class="line">        // 如果当前时间与上一次时间相同，则循环等待直到时间戳改变</span><br><span class="line">        while (current == lastTimeStamp)&#123;</span><br><span class="line">            current = System.currentTimeMillis() - START_STAMP;</span><br><span class="line">        &#125;</span><br><span class="line">        return current;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        IdGenerator idGenerator = new IdGenerator(1,2);</span><br><span class="line">        for (int i = 0; i &lt; 1000; i++) &#123;</span><br><span class="line">            new Thread(() -&gt; System.out.println(idGenerator.getId())).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="算法存在的问题以及解决方案"><a href="#算法存在的问题以及解决方案" class="headerlink" title="算法存在的问题以及解决方案"></a>算法存在的问题以及解决方案</h1><ol><li><strong>系统时钟回拨</strong>：如果服务器的时间突然回拨，可能导致生成的时间戳变小，从而生成重复的ID。</li><li><strong>机器ID配置错误</strong>：如果在不同的服务器上配置了相同的机器ID，那么这些服务器生成的ID就可能出现重复。</li><li><strong>并发量超出设计范围</strong>：如果同一台机器在同一毫秒内的并发请求超过了4096次，那么序列号就会耗尽，从而导致ID重复。</li></ol><p><strong>解决方案</strong></p><ol><li><strong>系统时钟同步</strong>：确保所有服务器的系统时钟是同步的，并且精确到毫秒。可以使用NTP（Network Time Protocol）等协议来同步系统时钟。</li><li><strong>合理分配机器ID</strong>：为每个服务器分配唯一的机器ID，并确保这些ID不会发生冲突。可以使用配置文件、<a href="https://cloud.baidu.com/solution/database.html">数据库</a>或者服务发现等方式来管理和分配机器ID。</li><li><strong>优化并发处理</strong>：如果服务器的并发量非常高，可以考虑优化系统的并发处理能力，比如使用连接池、异步处理等方式来降低同一毫秒内的请求量。</li><li><strong>引入容错机制</strong>：在生成ID时，可以增加一些容错机制来避免ID重复。例如，当检测到系统时钟回拨时，可以暂停生成ID，直到系统时钟恢复正常；当检测到即将生成重复的ID时，可以调整时间戳或序列号来避免重复。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 雪花 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从0开始实现rpc</title>
      <link href="/2024/07/26/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%AE%9E%E7%8E%B0rpc/"/>
      <url>/2024/07/26/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%AE%9E%E7%8E%B0rpc/</url>
      
        <content type="html"><![CDATA[<h1 id="rpc的通信流程"><a href="#rpc的通信流程" class="headerlink" title="rpc的通信流程"></a>rpc的通信流程</h1><p>rpc能实现调用远程方法就跟调用本地（同一个项目中的方法）一样，发起调用请求的那一方叫做调用方，被调用 的一方叫做服务提供方。 发起远程调用的核心是网络通信，整个调用过程中的一些流程和细节：</p><ol><li><strong>传输协议</strong>：既然 rpc 存在的核心目的是为了实现远程调用，既然是远程调用那肯定就需要通过网络来传输数 据，并且 rpc 常用于业务系统之间的数据交互，需要保证其可靠性，所以 rpc 一般默认采用 TCP 来传输。事实 上。我们常用的 HTTP 协议也是建立在 TCP 之上的。选择tcp的核心原因还是因为他的效率要比很多应用层协议高 很多。 </li><li><strong>封装一个可用的协议</strong>：选择了合适的传输层协议之后，我们需要基于此建立一个我们自己的通用协议，和http 一样需要封装自己的应用层协议。 </li><li><strong>序列化</strong>：网络传输的数据必须是二进制数据，但调用方请求的出入参数都是对象。对象是肯定没法直接在网络 中传输的，需要提前把它转成可传输的二进制，并且要求转换算法是可逆的，这个过程我们一般叫做“序列化”。 </li><li><strong>压缩</strong>：如果我们觉得序列化后的字节数组体积比较大，我们还可以对他进行压缩，压缩后的字节数组体积更 小，能在传输的过程中更加节省带宽和内存。</li></ol><p><img src="https://yuechu-bucket.oss-cn-beijing.aliyuncs.com/undefined202407261746181.png" alt="image-20240726174632097"></p><h1 id="协议定制"><a href="#协议定制" class="headerlink" title="协议定制"></a>协议定制</h1><h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class RpcRequest &#123;</span><br><span class="line">    //请求id</span><br><span class="line">    private long requestId;</span><br><span class="line">    //请求类型</span><br><span class="line">    private byte requestType;</span><br><span class="line">    //压缩类型</span><br><span class="line">    private byte compressType;</span><br><span class="line">    //序列化方式</span><br><span class="line">    private byte serializeType;</span><br><span class="line">    //消息体</span><br><span class="line">    private RequestPayload requestPayload;</span><br><span class="line">    //时间戳</span><br><span class="line">    private long timeStrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="body"><a href="#body" class="headerlink" title="body"></a>body</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class RequestPayload implements Serializable &#123;</span><br><span class="line">    //接口名字</span><br><span class="line">    private String interfaceName;</span><br><span class="line">    //方法的名字</span><br><span class="line">    private String methodName;</span><br><span class="line">    //参数类型</span><br><span class="line">    private Class&lt;?&gt;[] paramType;</span><br><span class="line">    //参数值</span><br><span class="line">    private Object[] paramValue;</span><br><span class="line">    //返回值</span><br><span class="line">    private Class&lt;?&gt; returnType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消息写入和解析"><a href="#消息写入和解析" class="headerlink" title="消息写入和解析"></a>消息写入和解析</h3><h4 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">protected void encode(ChannelHandlerContext channelHandlerContext, rpcRequest rpcRequest, ByteBuf byteBuf) throws Exception &#123;</span><br><span class="line">    //4字节的魔术值</span><br><span class="line">    byteBuf.writeBytes(MessageConstant.MAGIC);</span><br><span class="line">    //1字节的版本号</span><br><span class="line">    byteBuf.writeByte(MessageConstant.VERSION);</span><br><span class="line">    //2字节的头部长度</span><br><span class="line">    byteBuf.writeShort(MessageConstant.HEADER_LENGTH);</span><br><span class="line">    //直接留四个字节给之后存总长度</span><br><span class="line">    byteBuf.writerIndex(byteBuf.writerIndex() + MessageConstant.LENGTH_FIELD_LENGTH);</span><br><span class="line">    //3个类型</span><br><span class="line">    byteBuf.writeByte(rpcRequest.getRequestType());</span><br><span class="line">    byteBuf.writeByte(rpcRequest.getSerializeType());</span><br><span class="line">    byteBuf.writeByte(rpcRequest.getCompressType());</span><br><span class="line">    //8字节请求id</span><br><span class="line">    byteBuf.writeLong(rpcRequest.getRequestId());</span><br><span class="line">    //8字节的时间戳</span><br><span class="line">    byteBuf.writeLong(rpcRequest.getTimeStrap());</span><br><span class="line">    //请求body</span><br><span class="line">    //序列化</span><br><span class="line">    SerializerWrapper serializerWrapper = SerializeFactory.getSerialize(MrpcBootStrap.getInstance()</span><br><span class="line">            .getConfiguration().getSerializeType());</span><br><span class="line">    byte[] bodyBytes = serializerWrapper.getSerializer().serialize(rpcRequest.getRequestPayload());</span><br><span class="line">    //压缩</span><br><span class="line">    bodyBytes = CompressorFactory.getCompressorWrapper(rpcRequest.getCompressType()).getCompressor()</span><br><span class="line">            .compress(bodyBytes);</span><br><span class="line">    //检查是否是心跳检测</span><br><span class="line">    if (bodyBytes != null)&#123;</span><br><span class="line">        byteBuf.writeBytes(bodyBytes);</span><br><span class="line">    &#125;</span><br><span class="line">    int bodyLength = bodyBytes == null ? 0 : bodyBytes.length;</span><br><span class="line">    int writeIndex = byteBuf.writerIndex();</span><br><span class="line">    byteBuf.writerIndex(MessageConstant.LENGTH_FIELD_OFFSET);</span><br><span class="line">    byteBuf.writeInt(MessageConstant.HEADER_LENGTH + bodyLength);</span><br><span class="line">    //将写指针归位</span><br><span class="line">    byteBuf.writerIndex(writeIndex);</span><br><span class="line"></span><br><span class="line">    log.debug(&quot;请求【&#123;&#125;】已经完成报文编码&quot;,rpcRequest.getRequestId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">private Object decodeFrame(ByteBuf byteBuf) &#123;</span><br><span class="line">    // 1、解析魔数</span><br><span class="line">    byte[] magic = new byte[MessageFormatConstant.MAGIC.length];</span><br><span class="line">    byteBuf.readBytes(magic);</span><br><span class="line">    // 检测魔数是否匹配</span><br><span class="line">    for (int i = 0; i &lt; magic.length; i++) &#123;</span><br><span class="line">        if(magic[i] != MessageFormatConstant.MAGIC[i])&#123;</span><br><span class="line">            throw new RuntimeException(&quot;The request obtained is not legitimate。&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 2、解析版本号</span><br><span class="line">    byte version = byteBuf.readByte();</span><br><span class="line">    if(version &gt; MessageFormatConstant.VERSION)&#123;</span><br><span class="line">        throw new RuntimeException(&quot;获得的请求版本不被支持。&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 3、解析头部的长度</span><br><span class="line">    short headLength = byteBuf.readShort();</span><br><span class="line">    </span><br><span class="line">    // 4、解析总长度</span><br><span class="line">    int fullLength = byteBuf.readInt();</span><br><span class="line">    </span><br><span class="line">    // 5、请求类型</span><br><span class="line">    byte requestType = byteBuf.readByte();</span><br><span class="line"></span><br><span class="line">    // 6、序列化类型</span><br><span class="line">    byte serializeType = byteBuf.readByte();</span><br><span class="line">    </span><br><span class="line">    // 7、压缩类型</span><br><span class="line">    byte compressType = byteBuf.readByte();</span><br><span class="line">    </span><br><span class="line">    // 8、请求id</span><br><span class="line">    long requestId = byteBuf.readLong();</span><br><span class="line"></span><br><span class="line">    // 9、时间戳</span><br><span class="line">    long timeStamp = byteBuf.readLong();</span><br><span class="line"></span><br><span class="line">    // 我们需要封装</span><br><span class="line">    rpcRequest rpcRequest = new rpcRequest();</span><br><span class="line">    rpcRequest.setRequestType(requestType);</span><br><span class="line">    rpcRequest.setCompressType(compressType);</span><br><span class="line">    rpcRequest.setSerializeType(serializeType);</span><br><span class="line">    rpcRequest.setRequestId(requestId);</span><br><span class="line">    rpcRequest.setTimeStamp(timeStamp);</span><br><span class="line">    </span><br><span class="line">    // 心跳请求没有负载，此处可以判断并直接返回</span><br><span class="line">    if( requestType == RequestType.HEART_BEAT.getId())&#123;</span><br><span class="line">        return rpcRequest;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int payloadLength = fullLength - headLength;</span><br><span class="line">    byte[] payload = new byte[payloadLength];</span><br><span class="line">    byteBuf.readBytes(payload);</span><br><span class="line">    </span><br><span class="line">    // 有了字节数组之后就可以解压缩，反序列化</span><br><span class="line">    // 1、解压缩</span><br><span class="line">    if(payload != null &amp;&amp; payload.length != 0) &#123;</span><br><span class="line">        Compressor compressor = CompressorFactory.getCompressor(compressType).getImpl();</span><br><span class="line">        payload = compressor.decompress(payload);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        // 2、反序列化</span><br><span class="line">        Serializer serializer = SerializerFactory.getSerializer(serializeType).getImpl();</span><br><span class="line">        RequestPayload requestPayload = serializer.deserialize(payload, RequestPayload.class);</span><br><span class="line">        rpcRequest.setRequestPayload(requestPayload);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if(log.isDebugEnabled())&#123;</span><br><span class="line">        log.debug(&quot;请求【&#123;&#125;】已经在服务端完成解码工作。&quot;,rpcRequest.getRequestId());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return rpcRequest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><p> 网络传输中，我们不能直接将堆内存的对象实例直接进行传输，而是需要将其序列化成一组二进制数据，这样的二 进制数据可以是字符序列，最简单的莫过于我们熟悉的json字符序列，当然，事实上只要是一组可逆的转换过程都 可以，如：  </p><ol><li>jdk的ObjectInputStream </li><li>Hession </li><li>json </li><li>protobuf等</li></ol><p> 事实上我们会发现一个问题，不同的序列化方式，在序列化后的信息密度是不一样的，像json这样，我们可以轻易 读懂，也就意味着他的信息密度是最小的，也就是序列化后的体积是最大的，传输传输过程中需要的带宽也是最大 的，选用什么样的序列化方式，也要和我们的系统的特性相结合。当然为了让我们的框架更加的灵活和具备可扩展 性，我们可以灵活配置序列化方式。  </p><p> 以下是jdk的序列化代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">package com.yy.springtest;</span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">public class JdkSerializer implements Serializer &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public byte[] serialize(Object obj) &#123;</span><br><span class="line">        if (log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(&quot;Serialization is being done using jdk.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        try (ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class="line">             ObjectOutputStream out = new ObjectOutputStream(baos)) &#123;</span><br><span class="line">            out.writeObject(obj);</span><br><span class="line">            return baos.toByteArray();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            log.error(&quot;对象[&#123;&#125;]序列化过程发生了异常！&quot;, obj, e);</span><br><span class="line">            throw new SerializeException(&quot;An exception occurred while implementing</span><br><span class="line">                    serialization using jdk&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public &lt;T&gt; T deserialize(byte[] bytes, Class&lt;T&gt; clazz) &#123;</span><br><span class="line">        if (log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(&quot;Deserialization is being done using jdk.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        try (</span><br><span class="line">                ByteArrayInputStream bin = new ByteArrayInputStream(bytes);</span><br><span class="line">                ObjectInputStream ois = new ObjectInputStream(bin);</span><br><span class="line">        ) &#123;</span><br><span class="line">            Object readObject = ois.readObject();</span><br><span class="line">            return (T) readObject;</span><br><span class="line">        &#125; catch (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            log.error(&quot;class[&#123;&#125;]反序列化过程发生了异常！&quot;, clazz.getName(), e);</span><br><span class="line">            throw new SerializeException(&quot;An exception occurred while implementing</span><br><span class="line">                    deserialization using jdk&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public byte getCode() &#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h1><p>如果我们觉得序列化后的二进制内容体积任然比较大，任然不能支持当前的业务容量，我们可以选择对序列化的结 果进行压缩，但是开启压缩一定要注意，这个操作本是就是一个cpu资源换取存储和带宽资源的操作，要判断当前 的业务是更需要cpu资源还是内存资源。 通常我们使用gzip的方式进行压缩：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">package com.yy.springtest;</span><br><span class="line"></span><br><span class="line">public class GzipCompress implements Compress &#123;</span><br><span class="line">    private static final int BUFFER_SIZE = 1024 * 4;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public byte[] compress(byte[] bytes) &#123;</span><br><span class="line">        if (bytes == null) &#123;</span><br><span class="line">            throw new CompressException(&quot;We tried to compress a byte array, but it was null. &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        try (ByteArrayOutputStream out = new ByteArrayOutputStream();</span><br><span class="line">             GZIPOutputStream gzip = new GZIPOutputStream(out)) &#123;</span><br><span class="line">            gzip.write(bytes);</span><br><span class="line">            gzip.flush();</span><br><span class="line">            gzip.finish();</span><br><span class="line">            return out.toByteArray();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            throw new RuntimeException(&quot;gzip compress error&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public byte[] decompress(byte[] bytes) &#123;</span><br><span class="line">        if (bytes == null) &#123;</span><br><span class="line">            throw new CompressException(&quot;We tried to decompress a byte array, but it was null. &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        try (ByteArrayOutputStream out = new ByteArrayOutputStream();</span><br><span class="line">             GZIPInputStream gunzip = new GZIPInputStream(new</span><br><span class="line">                     ByteArrayInputStream(bytes))) &#123;</span><br><span class="line">            byte[] buffer = new byte[BUFFER_SIZE];</span><br><span class="line">            int n;</span><br><span class="line">            while ((n = gunzip.read(buffer)) &gt; -1) &#123;</span><br><span class="line">                out.write(buffer, 0, n);</span><br><span class="line">            &#125;</span><br><span class="line">            return out.toByteArray();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            throw new CompressException(&quot;gzip decompress error&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public byte getCode() &#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="服务注册发现"><a href="#服务注册发现" class="headerlink" title="服务注册发现"></a>服务注册发现</h1><blockquote><p>内容包括：</p><ol><li>服务提供方将服务注册到注册中心中</li><li>消费端拉取服务列表</li></ol></blockquote><h2 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h2><h4 id="注册中心统一接口"><a href="#注册中心统一接口" class="headerlink" title="注册中心统一接口"></a>注册中心统一接口</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public interface Registry &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 服务注册</span><br><span class="line">     * @param serviceConfig 服务配置内容</span><br><span class="line">     */</span><br><span class="line">    void registry(ServiceConfig&lt;?&gt; serviceConfig);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 查询到一个可用的服务</span><br><span class="line">     *</span><br><span class="line">     * @param serviceName 服务名称</span><br><span class="line">     * @return ip和端口</span><br><span class="line">     */</span><br><span class="line">    List&lt;InetSocketAddress&gt; lookUp(String serviceName,String group);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Netty（立消费端和服务提供-方的之间的长连接）"><a href="#Netty（立消费端和服务提供-方的之间的长连接）" class="headerlink" title="Netty（立消费端和服务提供 方的之间的长连接）"></a>Netty（立消费端和服务提供 方的之间的长连接）</h1><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2>]]></content>
      
      
      <categories>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rpc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis原理</title>
      <link href="/2024/07/23/redis%E5%8E%9F%E7%90%86/"/>
      <url>/2024/07/23/redis%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="SDS"><a href="#SDS" class="headerlink" title="SDS"></a>SDS</h3><h4 id="出现的由来"><a href="#出现的由来" class="headerlink" title="出现的由来"></a>出现的由来</h4><p>我们知道redis是使用c语言来编写的，但是redis并没有直接使用c语言中的字符串，因为c语言的字符串存在很多的问题：</p><ul><li>获取字符串的长度需要通过运算</li><li>非二进制安全（以’\0’来结束标识）</li><li>不可修改</li></ul><h4 id="数据结构源码"><a href="#数据结构源码" class="headerlink" title="数据结构源码"></a>数据结构源码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct sdshdr8 &#123;</span><br><span class="line">    uint8_t len;    //字符串长度</span><br><span class="line">    uint8_t alloc;  //字符串空间大小</span><br><span class="line">    unsigned char flags; //表示sds的类型（8位）</span><br><span class="line">    char buf[];  //用于存储字符串数据</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="IntSet"><a href="#IntSet" class="headerlink" title="IntSet"></a>IntSet</h3><h3 id="Dick"><a href="#Dick" class="headerlink" title="Dick"></a>Dick</h3><h3 id="ZipList"><a href="#ZipList" class="headerlink" title="ZipList"></a>ZipList</h3><h3 id="QuickList"><a href="#QuickList" class="headerlink" title="QuickList"></a>QuickList</h3><h3 id="SkipList"><a href="#SkipList" class="headerlink" title="SkipList"></a>SkipList</h3><h2 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h2><h2 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h2><h2 id="内存策略"><a href="#内存策略" class="headerlink" title="内存策略"></a>内存策略</h2>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用游标分页优化深分页</title>
      <link href="/2024/07/23/%E4%BD%BF%E7%94%A8%E6%B8%B8%E6%A0%87%E5%88%86%E9%A1%B5%E4%BC%98%E5%8C%96%E6%B7%B1%E5%88%86%E9%A1%B5/"/>
      <url>/2024/07/23/%E4%BD%BF%E7%94%A8%E6%B8%B8%E6%A0%87%E5%88%86%E9%A1%B5%E4%BC%98%E5%8C%96%E6%B7%B1%E5%88%86%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<h3 id="业务复现"><a href="#业务复现" class="headerlink" title="业务复现"></a>业务复现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">QueryWrapper&lt;Post&gt; postQueryWrapper = new QueryWrapper&lt;&gt;();</span><br><span class="line">postQueryWrapper.eq(&quot;detection_status&quot;,DETECTION_SUCCESS)</span><br><span class="line">        .eq(&quot;has_delete&quot;,0)</span><br><span class="line">        .eq(!Strings.isBlank(tagId),&quot;tag_id&quot;,tagId)//tagId 不为空  更具tagId 查询</span><br><span class="line">        .orderByDesc(strategyMap.get(order));</span><br></pre></td></tr></table></figure><blockquote><p>在进行分页查询的时候，此时数据库中的数据是无序的，假设数据库中有三个数据1，3，5 </p><p>第一次查询的时候可能是 1，3，5 的顺序，此时在第一页取俩条数据是1和3</p><p>第二次查询的时候可能是 1，5，3 的顺序，此时在第二页取俩条数据是3</p><p>此时导致俩次查询到同一条数据2</p></blockquote><h3 id="第一次问题的解决办法"><a href="#第一次问题的解决办法" class="headerlink" title="第一次问题的解决办法"></a>第一次问题的解决办法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">QueryWrapper&lt;Post&gt; postQueryWrapper = new QueryWrapper&lt;&gt;();</span><br><span class="line">postQueryWrapper.eq(&quot;detection_status&quot;,DETECTION_SUCCESS)</span><br><span class="line">        .eq(&quot;has_delete&quot;,0)</span><br><span class="line">        .eq(!Strings.isBlank(tagId),&quot;tag_id&quot;,tagId)//tagId 不为空  更具tagId 查询</span><br><span class="line">        .orderByDesc(strategyMap.get(order))</span><br><span class="line">        .orderByDesc(&quot;post_id&quot;);</span><br></pre></td></tr></table></figure><blockquote><p>既然查询的数据是无序的，那我们就让他进行一个排序的操作，那当然不会有重复数据的问题啦qwq</p><p>其实会有新的问题！</p><p>以1，3，5 举例</p><p>我们第一次查询第一页的俩条数据 1，3</p><p>此时插入一条数据 2，数据库中的数据为 1，2，3，5</p><p>我们在第二页查询俩条数据，返回的数据为3，5</p><p>也就是第一次查询的数据3再次被查到了。</p></blockquote><h3 id="第二次解决方法（游标查找）"><a href="#第二次解决方法（游标查找）" class="headerlink" title="第二次解决方法（游标查找）"></a>第二次解决方法（游标查找）</h3><blockquote><p>我们在查询数据的时候，让前端返回一个上一次查询的最大值，以上一个例子举例，第二次查询的时候我们让前端返回第一次查询的最大值，也就是3，那么我们第二次查询的时候就查找比3大的俩条数据就行啦~~</p><p>需要注意的是，当我们使用游标分页的方法时，无法直接获取到指定页数，而是必须从前往后逐页遍历。这与 ES 的 scroll 是类似的。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> mysql优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 优化 </tag>
            
            <tag> 分页 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
